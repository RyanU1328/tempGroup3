# This automatically compiles the code when merges are made to main.
# It may eventually be integrated with JUnit5 testing.
# For now it just shows issues in compiling the codebase

image: eclipse-temurin:11

stages: # List of stages for jobs, and their order of execution
  - build
  - test-1
  - merge-test

build-job: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - javac -sourcepath ./src -d ./bin/ ./src/main/Main.java
    - echo "Compile complete."

# Default pipeline, runs when there are any commits to branches or to main
JUnit-tests:
  stage: test-1
  script:
    - echo "Running Tests..."
    - echo "Compiling test code..."
    - wget https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12-runtime.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.12/org.jacoco.cli-0.8.12-nodeps.jar https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.10.2/junit-platform-console-standalone-1.10.2.jar -P ./JARs/ --random-wait
    - find . -type f -name "*.java" | xargs -I % javac -cp ./JARs/junit-jupiter-5.10.2.jar -cp ./JARs/junit-platform-console-standalone-1.10.2.jar -sourcepath ./src -d ./bin %
    - java -javaagent:./JARs/org.jacoco.agent-0.8.12-runtime.jar=excludes=Test* -jar ./JARs/junit-platform-console-standalone-1.10.2.jar execute --class-path ./bin/ --scan-class-path --reports-dir ./reports
    - rm -r ./bin
    - find ./src -type f -name "*.java" | xargs -I % javac -cp ./JARs/junit-jupiter-5.10.2.jar -cp ./JARs/junit-platform-console-standalone-1.10.2.jar -sourcepath ./src -d ./bin %
    - java -jar ./JARs/org.jacoco.cli-0.8.12-nodeps.jar report ./jacoco.exec --classfiles ./bin/ --sourcefiles ./src  --csv ./reports/report.csv
    - ls -R
    - total=0
    - covered=0
    - percentage=0
    - while IFS="," read -r rec1 rec2; do  let total=$total+$rec1 ;  let covered=$covered+$rec2; let total=$total+$rec2; done < <(cut -d "," -f4,5 ./reports/report.csv | tail -n +2); percentage=$(awk -v total=$total -v covered=$covered 'BEGIN { print ((covered/total)*100)}'); awk -v percentage=$percentage 'BEGIN { printf("Code Coverage= %0.1f%%\n", percentage)}';
    - echo "Tests complete."

  coverage: '/Code Coverage= \d+(?:\.\d+)?/'

  artifacts:
    reports:
      junit: ./reports/*jupiter.xml

merge-request-job:
  stage: merge-test
  script:
    - echo "Running Tests..."
    - echo "Compiling test code..."
    - wget https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter/5.10.2/junit-jupiter-5.10.2.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.10.2/junit-platform-console-standalone-1.10.2.jar -P ./JARs/ -w 10
    - find . -type f -name "*.java" | xargs -I % javac -cp ./JARs/junit-jupiter-5.10.2.jar -cp ./JARs/junit-platform-console-standalone-1.10.2.jar -sourcepath ./src -d ./bin %
    - java -jar ./JARs/junit-platform-console-standalone-1.10.2.jar execute --class-path ./bin/ --scan-class-path --reports-dir ./reports
    - echo "Tests complete."
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
